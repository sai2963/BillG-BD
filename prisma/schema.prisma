// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                    String   @id @default(cuid())
  title                 String
  description           String?
  price                 Float
  category              String?
  brand                 String?
  thumbnail             String?
  images                String[] @default([])
  rating                Float    @default(0)
  stock                 Int      @default(0)
  tags                  String[] @default([])
  warrantyInformation   String?
  shippingInformation   String?
  availabilityStatus    String   @default("In Stock")
  returnPolicy          String?
  minimumOrderQuantity  Int      @default(1)
  
  // Relationships
  billItems BillItem[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Customer {
  id          String @id @default(cuid())
  name        String
  mobileNumber String
  email       String?
  address     String?
  
  // Relationships
  bills Bill[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Bill {
  id              String   @id @default(cuid())
  billNumber      String   @unique
  
  // Customer Info
  customerId      String
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  // User Association (for subscription tracking)
  userId          String?
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Bill Details
  totalAmount     Float
  discountPercent Float    @default(0)
  discountAmount  Float    @default(0)
  finalAmount     Float
  
  // Payment Info
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod @default(CASH)
  
  // Bill Items
  items BillItem[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bills")
}

model BillItem {
  id        String @id @default(cuid())
  
  // References
  billId    String
  bill      Bill   @relation(fields: [billId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
  
  // Item Details
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  
  // Timestamps
  createdAt DateTime @default(now())

  @@map("bill_items")
}

// ==================== SUBSCRIPTION MODELS ====================

model User {
  id                String   @id @default(cuid())
  clerkId           String   @unique
  email             String   @unique
  firstName         String?
  lastName          String?
  
  // Relationships
  subscriptions     Subscription[]
  bills             Bill[]
  usageRecords      UsageRecord[]
  subscriptionBills SubscriptionBill[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Subscription {
  id            String            @id @default(cuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Subscription Details
  planType      SubscriptionPlan
  status        SubscriptionStatus @default(ACTIVE)
  
  // Billing
  amount        Float
  startDate     DateTime          @default(now())
  endDate       DateTime?
  nextBillingDate DateTime?
  
  // For Custom Plan
  billsGenerated Int              @default(0)
  
  // Payment tracking
  lastPaymentDate DateTime?
  lastPaymentAmount Float?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model UsageRecord {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  billId      String
  
  // For billing calculation
  month       Int      // 1-12
  year        Int
  
  // Timestamps
  createdAt DateTime @default(now())

  @@index([userId, month, year])
  @@map("usage_records")
}

model SubscriptionBill {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Bill Details
  billNumber      String   @unique
  amount          Float
  planType        SubscriptionPlan
  
  // Billing Period
  billingMonth    Int      // 1-12
  billingYear     Int
  
  // For Custom Plan
  billsCount      Int?     // Number of bills generated in this period
  
  // Payment Status
  status          PaymentStatus @default(PENDING)
  dueDate         DateTime
  paidDate        DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, billingMonth, billingYear])
  @@map("subscription_bills")
}

// ==================== ENUMS ====================

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  BANK_TRANSFER
  OTHER
}

enum SubscriptionPlan {
  MONTHLY
  ANNUAL
  CUSTOM
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
}